/*
 * This file is generated by jOOQ.
 */
package org.estafet.jooqModels.tables;


import java.util.Arrays;
import java.util.List;

import org.estafet.jooqModels.Keys;
import org.estafet.jooqModels.Public;
import org.estafet.jooqModels.tables.records.CustomersAddressesRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomersAddresses extends TableImpl<CustomersAddressesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customers_addresses</code>
     */
    public static final CustomersAddresses CUSTOMERS_ADDRESSES = new CustomersAddresses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersAddressesRecord> getRecordType() {
        return CustomersAddressesRecord.class;
    }

    /**
     * The column <code>public.customers_addresses.address_id</code>.
     */
    public final TableField<CustomersAddressesRecord, Integer> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.customers_addresses.address</code>.
     */
    public final TableField<CustomersAddressesRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers_addresses.city</code>.
     */
    public final TableField<CustomersAddressesRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.customers_addresses.province</code>.
     */
    public final TableField<CustomersAddressesRecord, String> PROVINCE = createField(DSL.name("province"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers_addresses.state</code>.
     */
    public final TableField<CustomersAddressesRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers_addresses.postal_code</code>.
     */
    public final TableField<CustomersAddressesRecord, Integer> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.customers_addresses.country</code>.
     */
    public final TableField<CustomersAddressesRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private CustomersAddresses(Name alias, Table<CustomersAddressesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomersAddresses(Name alias, Table<CustomersAddressesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.customers_addresses</code> table reference
     */
    public CustomersAddresses(String alias) {
        this(DSL.name(alias), CUSTOMERS_ADDRESSES);
    }

    /**
     * Create an aliased <code>public.customers_addresses</code> table reference
     */
    public CustomersAddresses(Name alias) {
        this(alias, CUSTOMERS_ADDRESSES);
    }

    /**
     * Create a <code>public.customers_addresses</code> table reference
     */
    public CustomersAddresses() {
        this(DSL.name("customers_addresses"), null);
    }

    public <O extends Record> CustomersAddresses(Table<O> child, ForeignKey<O, CustomersAddressesRecord> key) {
        super(child, key, CUSTOMERS_ADDRESSES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CustomersAddressesRecord, Integer> getIdentity() {
        return (Identity<CustomersAddressesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomersAddressesRecord> getPrimaryKey() {
        return Keys.CUSTOMERS_ADDRESSES_PKEY;
    }

    @Override
    public List<Check<CustomersAddressesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("customers_addresses_postal_code_check"), "((postal_code > 0))", true)
        );
    }

    @Override
    public CustomersAddresses as(String alias) {
        return new CustomersAddresses(DSL.name(alias), this);
    }

    @Override
    public CustomersAddresses as(Name alias) {
        return new CustomersAddresses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomersAddresses rename(String name) {
        return new CustomersAddresses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomersAddresses rename(Name name) {
        return new CustomersAddresses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
