/*
 * This file is generated by jOOQ.
 */
package org.estafet.jooqModels.tables;


import java.util.Arrays;
import java.util.List;

import org.estafet.jooqModels.Keys;
import org.estafet.jooqModels.Public;
import org.estafet.jooqModels.tables.records.OrdersProductQuantitiesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersProductQuantities extends TableImpl<OrdersProductQuantitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.orders_product_quantities</code>
     */
    public static final OrdersProductQuantities ORDERS_PRODUCT_QUANTITIES = new OrdersProductQuantities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersProductQuantitiesRecord> getRecordType() {
        return OrdersProductQuantitiesRecord.class;
    }

    /**
     * The column <code>public.orders_product_quantities.id</code>.
     */
    public final TableField<OrdersProductQuantitiesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.orders_product_quantities.pid</code>.
     */
    public final TableField<OrdersProductQuantitiesRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.orders_product_quantities.oid</code>.
     */
    public final TableField<OrdersProductQuantitiesRecord, Integer> OID = createField(DSL.name("oid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.orders_product_quantities.quantity</code>.
     */
    public final TableField<OrdersProductQuantitiesRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    private OrdersProductQuantities(Name alias, Table<OrdersProductQuantitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrdersProductQuantities(Name alias, Table<OrdersProductQuantitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.orders_product_quantities</code> table
     * reference
     */
    public OrdersProductQuantities(String alias) {
        this(DSL.name(alias), ORDERS_PRODUCT_QUANTITIES);
    }

    /**
     * Create an aliased <code>public.orders_product_quantities</code> table
     * reference
     */
    public OrdersProductQuantities(Name alias) {
        this(alias, ORDERS_PRODUCT_QUANTITIES);
    }

    /**
     * Create a <code>public.orders_product_quantities</code> table reference
     */
    public OrdersProductQuantities() {
        this(DSL.name("orders_product_quantities"), null);
    }

    public <O extends Record> OrdersProductQuantities(Table<O> child, ForeignKey<O, OrdersProductQuantitiesRecord> key) {
        super(child, key, ORDERS_PRODUCT_QUANTITIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrdersProductQuantitiesRecord, Integer> getIdentity() {
        return (Identity<OrdersProductQuantitiesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrdersProductQuantitiesRecord> getPrimaryKey() {
        return Keys.ORDERS_PRODUCT_QUANTITIES_PKEY;
    }

    @Override
    public List<ForeignKey<OrdersProductQuantitiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDERS_PRODUCT_QUANTITIES__ORDERS_PRODUCT_QUANTITIES_PID_FKEY, Keys.ORDERS_PRODUCT_QUANTITIES__ORDERS_PRODUCT_QUANTITIES_OID_FKEY);
    }

    private transient ProductsInventory _productsInventory;
    private transient Orders _orders;

    /**
     * Get the implicit join path to the <code>public.products_inventory</code>
     * table.
     */
    public ProductsInventory productsInventory() {
        if (_productsInventory == null)
            _productsInventory = new ProductsInventory(this, Keys.ORDERS_PRODUCT_QUANTITIES__ORDERS_PRODUCT_QUANTITIES_PID_FKEY);

        return _productsInventory;
    }

    /**
     * Get the implicit join path to the <code>public.orders</code> table.
     */
    public Orders orders() {
        if (_orders == null)
            _orders = new Orders(this, Keys.ORDERS_PRODUCT_QUANTITIES__ORDERS_PRODUCT_QUANTITIES_OID_FKEY);

        return _orders;
    }

    @Override
    public OrdersProductQuantities as(String alias) {
        return new OrdersProductQuantities(DSL.name(alias), this);
    }

    @Override
    public OrdersProductQuantities as(Name alias) {
        return new OrdersProductQuantities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersProductQuantities rename(String name) {
        return new OrdersProductQuantities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersProductQuantities rename(Name name) {
        return new OrdersProductQuantities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
