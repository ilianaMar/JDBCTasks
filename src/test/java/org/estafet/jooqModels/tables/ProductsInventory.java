/*
 * This file is generated by jOOQ.
 */
package org.estafet.jooqModels.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.estafet.jooqModels.Keys;
import org.estafet.jooqModels.Public;
import org.estafet.jooqModels.tables.records.ProductsInventoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductsInventory extends TableImpl<ProductsInventoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.products_inventory</code>
     */
    public static final ProductsInventory PRODUCTS_INVENTORY = new ProductsInventory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsInventoryRecord> getRecordType() {
        return ProductsInventoryRecord.class;
    }

    /**
     * The column <code>public.products_inventory.product_id</code>.
     */
    public final TableField<ProductsInventoryRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.products_inventory.product_name</code>.
     */
    public final TableField<ProductsInventoryRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.products_inventory.available_quantity</code>.
     */
    public final TableField<ProductsInventoryRecord, Integer> AVAILABLE_QUANTITY = createField(DSL.name("available_quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.products_inventory.product_type</code>.
     */
    public final TableField<ProductsInventoryRecord, String> PRODUCT_TYPE = createField(DSL.name("product_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.products_inventory.price_without_vat</code>.
     */
    public final TableField<ProductsInventoryRecord, BigDecimal> PRICE_WITHOUT_VAT = createField(DSL.name("price_without_vat"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.products_inventory.price_with_vat</code>.
     */
    public final TableField<ProductsInventoryRecord, BigDecimal> PRICE_WITH_VAT = createField(DSL.name("price_with_vat"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.products_inventory.in_stock</code>.
     */
    public final TableField<ProductsInventoryRecord, Boolean> IN_STOCK = createField(DSL.name("in_stock"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.products_inventory.warehouse</code>.
     */
    public final TableField<ProductsInventoryRecord, Integer> WAREHOUSE = createField(DSL.name("warehouse"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.products_inventory.supplier_id</code>.
     */
    public final TableField<ProductsInventoryRecord, Integer> SUPPLIER_ID = createField(DSL.name("supplier_id"), SQLDataType.INTEGER, this, "");

    private ProductsInventory(Name alias, Table<ProductsInventoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductsInventory(Name alias, Table<ProductsInventoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.products_inventory</code> table reference
     */
    public ProductsInventory(String alias) {
        this(DSL.name(alias), PRODUCTS_INVENTORY);
    }

    /**
     * Create an aliased <code>public.products_inventory</code> table reference
     */
    public ProductsInventory(Name alias) {
        this(alias, PRODUCTS_INVENTORY);
    }

    /**
     * Create a <code>public.products_inventory</code> table reference
     */
    public ProductsInventory() {
        this(DSL.name("products_inventory"), null);
    }

    public <O extends Record> ProductsInventory(Table<O> child, ForeignKey<O, ProductsInventoryRecord> key) {
        super(child, key, PRODUCTS_INVENTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductsInventoryRecord, Integer> getIdentity() {
        return (Identity<ProductsInventoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductsInventoryRecord> getPrimaryKey() {
        return Keys.PRODUCTS_INVENTORY_PKEY;
    }

    @Override
    public List<ForeignKey<ProductsInventoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCTS_INVENTORY__PRODUCTS_INVENTORY_SUPPLIER_ID_FKEY);
    }

    private transient Suppliers _suppliers;

    /**
     * Get the implicit join path to the <code>public.suppliers</code> table.
     */
    public Suppliers suppliers() {
        if (_suppliers == null)
            _suppliers = new Suppliers(this, Keys.PRODUCTS_INVENTORY__PRODUCTS_INVENTORY_SUPPLIER_ID_FKEY);

        return _suppliers;
    }

    @Override
    public ProductsInventory as(String alias) {
        return new ProductsInventory(DSL.name(alias), this);
    }

    @Override
    public ProductsInventory as(Name alias) {
        return new ProductsInventory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductsInventory rename(String name) {
        return new ProductsInventory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductsInventory rename(Name name) {
        return new ProductsInventory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, Integer, String, BigDecimal, BigDecimal, Boolean, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
