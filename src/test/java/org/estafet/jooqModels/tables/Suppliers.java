/*
 * This file is generated by jOOQ.
 */
package org.estafet.jooqModels.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.estafet.jooqModels.Keys;
import org.estafet.jooqModels.Public;
import org.estafet.jooqModels.tables.records.SuppliersRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Suppliers extends TableImpl<SuppliersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.suppliers</code>
     */
    public static final Suppliers SUPPLIERS = new Suppliers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SuppliersRecord> getRecordType() {
        return SuppliersRecord.class;
    }

    /**
     * The column <code>public.suppliers.id</code>.
     */
    public final TableField<SuppliersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.suppliers.name</code>.
     */
    public final TableField<SuppliersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.suppliers.email</code>.
     */
    public final TableField<SuppliersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.suppliers.phone</code>.
     */
    public final TableField<SuppliersRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.suppliers.age</code>.
     */
    public final TableField<SuppliersRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER.defaultValue(DSL.field("99", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.suppliers.gdpr_set</code>.
     */
    public final TableField<SuppliersRecord, Boolean> GDPR_SET = createField(DSL.name("gdpr_set"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.suppliers.is_active</code>.
     */
    public final TableField<SuppliersRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.suppliers.created_time</code>.
     */
    public final TableField<SuppliersRecord, OffsetDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.suppliers.updated_time</code>.
     */
    public final TableField<SuppliersRecord, OffsetDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.suppliers.reason_for_deactivation</code>.
     */
    public final TableField<SuppliersRecord, String> REASON_FOR_DEACTIVATION = createField(DSL.name("reason_for_deactivation"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.suppliers.notes</code>.
     */
    public final TableField<SuppliersRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.suppliers.address_id</code>.
     */
    public final TableField<SuppliersRecord, Integer> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Suppliers(Name alias, Table<SuppliersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Suppliers(Name alias, Table<SuppliersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.suppliers</code> table reference
     */
    public Suppliers(String alias) {
        this(DSL.name(alias), SUPPLIERS);
    }

    /**
     * Create an aliased <code>public.suppliers</code> table reference
     */
    public Suppliers(Name alias) {
        this(alias, SUPPLIERS);
    }

    /**
     * Create a <code>public.suppliers</code> table reference
     */
    public Suppliers() {
        this(DSL.name("suppliers"), null);
    }

    public <O extends Record> Suppliers(Table<O> child, ForeignKey<O, SuppliersRecord> key) {
        super(child, key, SUPPLIERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SuppliersRecord, Integer> getIdentity() {
        return (Identity<SuppliersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SuppliersRecord> getPrimaryKey() {
        return Keys.SUPPLIERS_PKEY;
    }

    @Override
    public List<UniqueKey<SuppliersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SUPPLIERS_EMAIL_KEY, Keys.SUPPLIERS_ADDRESS_ID_KEY);
    }

    @Override
    public List<ForeignKey<SuppliersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUPPLIERS__SUPPLIERS_ADDRESS_ID_FKEY);
    }

    private transient SuppliersAddresses _suppliersAddresses;

    /**
     * Get the implicit join path to the <code>public.suppliers_addresses</code>
     * table.
     */
    public SuppliersAddresses suppliersAddresses() {
        if (_suppliersAddresses == null)
            _suppliersAddresses = new SuppliersAddresses(this, Keys.SUPPLIERS__SUPPLIERS_ADDRESS_ID_FKEY);

        return _suppliersAddresses;
    }

    @Override
    public List<Check<SuppliersRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("suppliers_age_check"), "((age >= 18))", true)
        );
    }

    @Override
    public Suppliers as(String alias) {
        return new Suppliers(DSL.name(alias), this);
    }

    @Override
    public Suppliers as(Name alias) {
        return new Suppliers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Suppliers rename(String name) {
        return new Suppliers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Suppliers rename(Name name) {
        return new Suppliers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, Integer, Boolean, Boolean, OffsetDateTime, OffsetDateTime, String, String, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
